import {
  GenkitError,
  dynamicResource
} from "genkit";
import { logger } from "genkit/logging";
function createDynamicResource(client, resource, params) {
  return dynamicResource(
    {
      name: `${params.serverName}/${resource.name}`,
      description: resource.description || void 0,
      metadata: { mcp: { _meta: resource._meta || {} } },
      uri: resource.uri
    },
    async (args, { context }) => {
      logger.debug(
        `[MCP] calling resource '${params.serverName}/${resource.name}' in host '${params.name}'`
      );
      const result = await client.readResource({
        uri: args.uri,
        _meta: context?.mcp?._meta
      });
      return {
        content: result.contents.map((p) => fromMcpResourcePart(p))
      };
    }
  );
}
function createDynamicResourceTemplate(client, template, params) {
  return dynamicResource(
    {
      name: `${params.serverName}/${template.name}`,
      description: template.description || void 0,
      metadata: { mcp: { _meta: template._meta || {} } },
      template: template.uriTemplate
    },
    async (args, { context }) => {
      logger.debug(
        `[MCP] calling resource template '${params.serverName}/${template.name}' in host '${params.name}'`
      );
      const result = await client.readResource({
        uri: args.uri,
        _meta: context?.mcp?._meta
      });
      return {
        content: result.contents.map((p) => fromMcpResourcePart(p)),
        metadata: result._meta
      };
    }
  );
}
function fromMcpResourcePart(part) {
  if (part.text) {
    return { text: part.text, metadata: part._meta };
  }
  if (part.blob) {
    return {
      media: {
        contentType: part.mimeType,
        url: `data:${part.mimeType};base64,${part.blob}`
      },
      metadata: part._meta
    };
  }
  throw new GenkitError({
    status: "UNIMPLEMENTED",
    message: `Part type ${part.type} is not currently supported.`
  });
}
async function fetchDynamicResources(ai, client, params) {
  let cursor;
  let allResources = [];
  while (true) {
    const { nextCursor, resources } = await client.listResources({ cursor });
    allResources.push(
      ...resources.map((r) => createDynamicResource(client, r, params))
    );
    cursor = nextCursor;
    if (!cursor) break;
  }
  while (true) {
    const { nextCursor, resourceTemplates } = await client.listResourceTemplates({ cursor });
    allResources.push(
      ...resourceTemplates.map(
        (r) => createDynamicResourceTemplate(client, r, params)
      )
    );
    cursor = nextCursor;
    if (!cursor) break;
  }
  return allResources;
}
export {
  fetchDynamicResources
};
//# sourceMappingURL=resource.mjs.map