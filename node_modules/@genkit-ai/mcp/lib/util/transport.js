"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transport_exports = {};
__export(transport_exports, {
  transportFrom: () => transportFrom
});
module.exports = __toCommonJS(transport_exports);
async function transportFrom(config, sessionId) {
  if ("transport" in config && config.transport) {
    return { transport: config.transport, type: "custom" };
  }
  if ("url" in config && config.url) {
    const { url, ...httpConfig } = config;
    const { StreamableHTTPClientTransport } = await import("@modelcontextprotocol/sdk/client/streamableHttp.js");
    return {
      transport: new StreamableHTTPClientTransport(new URL(url), {
        ...httpConfig,
        sessionId
      }),
      type: "http"
    };
  }
  if ("command" in config && config.command) {
    const stdioConfig = { ...config };
    const { StdioClientTransport } = await import("@modelcontextprotocol/sdk/client/stdio.js");
    return {
      transport: new StdioClientTransport(stdioConfig),
      type: "stdio"
    };
  }
  return { transport: null, type: "unknown" };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  transportFrom
});
//# sourceMappingURL=transport.js.map