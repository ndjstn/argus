"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var resource_exports = {};
__export(resource_exports, {
  fetchDynamicResources: () => fetchDynamicResources
});
module.exports = __toCommonJS(resource_exports);
var import_genkit = require("genkit");
var import_logging = require("genkit/logging");
function createDynamicResource(client, resource, params) {
  return (0, import_genkit.dynamicResource)(
    {
      name: `${params.serverName}/${resource.name}`,
      description: resource.description || void 0,
      metadata: { mcp: { _meta: resource._meta || {} } },
      uri: resource.uri
    },
    async (args, { context }) => {
      import_logging.logger.debug(
        `[MCP] calling resource '${params.serverName}/${resource.name}' in host '${params.name}'`
      );
      const result = await client.readResource({
        uri: args.uri,
        _meta: context?.mcp?._meta
      });
      return {
        content: result.contents.map((p) => fromMcpResourcePart(p))
      };
    }
  );
}
function createDynamicResourceTemplate(client, template, params) {
  return (0, import_genkit.dynamicResource)(
    {
      name: `${params.serverName}/${template.name}`,
      description: template.description || void 0,
      metadata: { mcp: { _meta: template._meta || {} } },
      template: template.uriTemplate
    },
    async (args, { context }) => {
      import_logging.logger.debug(
        `[MCP] calling resource template '${params.serverName}/${template.name}' in host '${params.name}'`
      );
      const result = await client.readResource({
        uri: args.uri,
        _meta: context?.mcp?._meta
      });
      return {
        content: result.contents.map((p) => fromMcpResourcePart(p)),
        metadata: result._meta
      };
    }
  );
}
function fromMcpResourcePart(part) {
  if (part.text) {
    return { text: part.text, metadata: part._meta };
  }
  if (part.blob) {
    return {
      media: {
        contentType: part.mimeType,
        url: `data:${part.mimeType};base64,${part.blob}`
      },
      metadata: part._meta
    };
  }
  throw new import_genkit.GenkitError({
    status: "UNIMPLEMENTED",
    message: `Part type ${part.type} is not currently supported.`
  });
}
async function fetchDynamicResources(ai, client, params) {
  let cursor;
  let allResources = [];
  while (true) {
    const { nextCursor, resources } = await client.listResources({ cursor });
    allResources.push(
      ...resources.map((r) => createDynamicResource(client, r, params))
    );
    cursor = nextCursor;
    if (!cursor) break;
  }
  while (true) {
    const { nextCursor, resourceTemplates } = await client.listResourceTemplates({ cursor });
    allResources.push(
      ...resourceTemplates.map(
        (r) => createDynamicResourceTemplate(client, r, params)
      )
    );
    cursor = nextCursor;
    if (!cursor) break;
  }
  return allResources;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fetchDynamicResources
});
//# sourceMappingURL=resource.js.map