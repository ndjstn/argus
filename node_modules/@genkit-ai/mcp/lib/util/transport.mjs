async function transportFrom(config, sessionId) {
  if ("transport" in config && config.transport) {
    return { transport: config.transport, type: "custom" };
  }
  if ("url" in config && config.url) {
    const { url, ...httpConfig } = config;
    const { StreamableHTTPClientTransport } = await import("@modelcontextprotocol/sdk/client/streamableHttp.js");
    return {
      transport: new StreamableHTTPClientTransport(new URL(url), {
        ...httpConfig,
        sessionId
      }),
      type: "http"
    };
  }
  if ("command" in config && config.command) {
    const stdioConfig = { ...config };
    const { StdioClientTransport } = await import("@modelcontextprotocol/sdk/client/stdio.js");
    return {
      transport: new StdioClientTransport(stdioConfig),
      type: "stdio"
    };
  }
  return { transport: null, type: "unknown" };
}
export {
  transportFrom
};
//# sourceMappingURL=transport.mjs.map