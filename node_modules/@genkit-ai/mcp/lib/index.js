"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var index_exports = {};
__export(index_exports, {
  GenkitMcpClient: () => import_client.GenkitMcpClient,
  GenkitMcpHost: () => import_client2.GenkitMcpHost,
  createMcpClient: () => createMcpClient,
  createMcpHost: () => createMcpHost,
  createMcpServer: () => createMcpServer,
  defineMcpClient: () => defineMcpClient,
  defineMcpHost: () => defineMcpHost
});
module.exports = __toCommonJS(index_exports);
var import_client = require("./client/client.js");
var import_client2 = require("./client/index.js");
var import_server = require("./server.js");
function createMcpHost(options) {
  return new import_client2.GenkitMcpHost(options);
}
function defineMcpHost(ai, options) {
  const mcpHost = new import_client2.GenkitMcpHost(options);
  const dap = ai.defineDynamicActionProvider(
    {
      name: options.name,
      cacheConfig: {
        ttlMillis: options.cacheTTLMillis
      }
    },
    async () => ({
      tool: await mcpHost.getActiveTools(ai),
      resource: await mcpHost.getActiveResources(ai)
    })
  );
  mcpHost.dynamicActionProvider = dap;
  return mcpHost;
}
function createMcpClient(options) {
  return new import_client.GenkitMcpClient(options);
}
function defineMcpClient(ai, options) {
  const mcpClient = new import_client.GenkitMcpClient(options);
  const dap = ai.defineDynamicActionProvider(
    {
      name: options.name,
      cacheConfig: {
        ttlMillis: options.cacheTtlMillis
      }
    },
    async () => {
      return {
        tool: await mcpClient.getActiveTools(ai),
        resource: await mcpClient.getActiveResources(ai)
      };
    }
  );
  mcpClient.dynamicActionProvider = dap;
  return mcpClient;
}
function createMcpServer(ai, options) {
  return new import_server.GenkitMcpServer(ai, options);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GenkitMcpClient,
  GenkitMcpHost,
  createMcpClient,
  createMcpHost,
  createMcpServer,
  defineMcpClient,
  defineMcpHost
});
//# sourceMappingURL=index.js.map