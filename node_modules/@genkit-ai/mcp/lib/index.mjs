import {
  GenkitMcpClient
} from "./client/client.js";
import {
  GenkitMcpHost
} from "./client/index.js";
import { GenkitMcpServer } from "./server.js";
function createMcpHost(options) {
  return new GenkitMcpHost(options);
}
function defineMcpHost(ai, options) {
  const mcpHost = new GenkitMcpHost(options);
  const dap = ai.defineDynamicActionProvider(
    {
      name: options.name,
      cacheConfig: {
        ttlMillis: options.cacheTTLMillis
      }
    },
    async () => ({
      tool: await mcpHost.getActiveTools(ai),
      resource: await mcpHost.getActiveResources(ai)
    })
  );
  mcpHost.dynamicActionProvider = dap;
  return mcpHost;
}
function createMcpClient(options) {
  return new GenkitMcpClient(options);
}
function defineMcpClient(ai, options) {
  const mcpClient = new GenkitMcpClient(options);
  const dap = ai.defineDynamicActionProvider(
    {
      name: options.name,
      cacheConfig: {
        ttlMillis: options.cacheTtlMillis
      }
    },
    async () => {
      return {
        tool: await mcpClient.getActiveTools(ai),
        resource: await mcpClient.getActiveResources(ai)
      };
    }
  );
  mcpClient.dynamicActionProvider = dap;
  return mcpClient;
}
function createMcpServer(ai, options) {
  return new GenkitMcpServer(ai, options);
}
export {
  GenkitMcpClient,
  GenkitMcpHost,
  createMcpClient,
  createMcpHost,
  createMcpServer,
  defineMcpClient,
  defineMcpHost
};
//# sourceMappingURL=index.mjs.map